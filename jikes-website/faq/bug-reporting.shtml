<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"-->
<html>
 <head>
  <title>Jikes Bug Reporting</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" href="../styles/jikes-faq.css">
  <meta name="author" content="cabbey@bresnanlink.net">

<!--

 TODOs:
   
  1. examples of how to do some of this stuff... like the backtrace/
  2. good and bad examples
  3. the last couple sections are weak. :(
 
-->
 
 </head>
 <body>
  <table border="0" cellspacing="0" cellpadding="6">
   <tr>
    <td colspan=2 nowrap align="center" valign="top"><img src="../images/user-faq-logo.png" width="150" height="54" alt="Jikes User FAQ"><img src="../images/jikes.png" width="600" height="54" alt=""></td>
   </tr>
   <tr><td colspan=2>&nbsp;</td></tr>
   <tr> 
    <td class="NavBar">
     <!--#include file="user-navbar.html" -->
    </td>
    <td class="TopicContent">
     <h1>So you think you've found a bug?</h1>
     <p>Well, ya know what... we're all just human, and compilers for any language
       are very difficult beasties to write so you may very well have done just that.
       Here's what we need you to do in order to correct this problem, without your
       help the odds of this bug being fixed are infinitesimally small.</p>
     <h2>Overview of process from here:</h2>
     <ol style="text-align:left;">
      <li>Verify that this isn't a WKB (Well Known Bug, aka a FRB (Frequently Reported Bug)).</li>
      <li>Verify that this is in fact a Jikes bug.</li>
      <li>Check that this bug is not already reported.</li>
      <li>Collect the information needed for a Jikes bug report.</li>
      <li>Report the bug.</li>
      <li>Assist in the elimination of the bug.</li>
      <li>Verify the bug has been fixed.</li>
     </ol>
     <h1>Verify that this isn't a WKB</h1>
     <p>Anytime we have a brown paper bag incident it will be listed here, if your bug is listed
       here and you still report it, expect to be ignored unless you have some new information; in
       which case you should append your information to the existing bug. (Please don't append "me
       too, you should fix this" type of messages.) <span style="background-color:#ffcccc;">Current
       status is indicated thusly.</span></p>
     <dl>
      <dt>Floating point issues</dt>
       <dd><a href="/developerworks/bugs/?func=detailbug&amp;bug_id=138&amp;group_id=10">138</a> and others.
        <span style="background-color:#ffcccc;">Eric is beating the fp code into submission one patch at a time.</span></dd>
      <dt>JPDA issues</dt>
       <dd><a href="/developerworks/bugs/?func=detailbug&amp;bug_id=210&amp;group_id=10">210</a>
       <span style="background-color:#ffcccc;">Patch
       <a href="/developerworks/bugs/?func=detailpatch&patch_id=56&group_id=10">56</a>
        has been proposed, but not verified.  Your feedback is
       needed!</span></dd>
      <dt>Variable shadowing</dt>
       <dd><a href="http://oss.software.ibm.com/developerworks/bugs/?func=detailbug&bug_id=197&group_id=10">197</a>
       Jikes does not allow legal variable shadowing in inner classes.
       <span style="background-color:#ffcccc;">Patch
       <a href="http://oss.software.ibm.com/developerworks/patch/?func=detailpatch&patch_id=62&group_id=10">62</a>
       has been proposed.</span></dd>
      <dt>-encoding issues</dt>
       <dd><a href="/developerworks/bugs/?func=detailbug&amp;bug_id=113&amp;group_id=10">113</a> and others
       not in the new bug system. <span style="background-color:#ffcccc;">These issues do not appear to be resolved in 1.13, but are
       being investigated by a number of people, we're hoping for a fix post 1.13.</span></dd>
      <dt>Build related issues</dt>
       <dd>There were a number of these. <span style="background-color:#ffcccc;">There was a completely new build system put into
       place for 1.12, if you've not tried to build anything newer than 1.11 try again now. There is one notable exception
       to this currently: <a href="/developerworks/bugs/?func=detailbug&amp;bug_id=110&amp;group_id=10">HP/UX</a>
       remains a problem. We need an HP/UX compiler expert to assist with this.</span></dd>
      <dt>Classpath crashes</dt>
       <dd>Older Jikes builds (~1.06 - 1.11) would occasionally drop core due to the length of the classpath (not so much that
       it was too long, as that it was "oddly mod 2" long), this also varied based on the platform and how its compiler laid out
       memory -- an excellent example of what happens when you trample on someone else's memory in C++ ;). <span style="background-color:#ffcccc;">
       FIXED in 1.12 (partially) and 1.13 (completely?)</span>.</dd>
     </dl>
     <p>If your bug wasn't listed above, move on to the next check.</p>
     <h1>Verify that this is in fact a Jikes bug</h1>
     <p>This is basically a sanity check, and a chance for you to prevent embarrassment. Some things to check:</p>
     <ul>
      <li>Spelling and existence of all entries in classpath and jikespath.</li>
      <li>Spelling and existence of all command line options, source files, destination directories, etc.</li>
      <li>What do some of the other compilers say about your source? If they all say it is in error what does the lang spec say about it?</li>
      <li>What do some other JVMs say about the class files Jikes produces? Do they all object to it, or just one?</li>
     </ul>
     <p>If you're still seeing this as a bug in Jikes, move on to the next check.</p>
     <h1>Check that this bug is not already reported</h1>
     <p>Like I said, we're all human and compilers are inherently difficult pieces of code. As a result there
      are bugs in Jikes, to say otherwise would be a lie. A fair number of bugs have already been identified and
      are in the Jikes Bug Collection. The purpose of this step is to take a look at some of the existing bugs
      and see if yours is a duplicate of one of these already existing bugs. The bugs in the collection are generally
      divided into the following categories, you should read the description of each and decide which your bug belongs
      in (maybe two, but probably not three or more). Once you've decided then take the link with each and skim the
      list of bugs returned, you may need to read the details of a bug before determining if it is yours or not.</p>
     <dl>
      <dt><a href="/developerworks/bugs/index.php?group_id=10&amp;set=custom&amp;_status=1&amp;_category=105">Parser</a></dt>
       <dd>The parser is responsible for converting your source code into the Abstract Symbol Tree that the 
        compiler uses internally to produce classes. Errors such as not recognizing a method name, or not
        seeing that a block could throw a certain type of exception would belong to the parser.</dd>
      <dt><a href="/developerworks/bugs/index.php?group_id=10&amp;set=custom&amp;_status=1&amp;_category=106">Emitter</a></dt>
       <dd>The emitter is responsible for turning the AST produced by the parser into bytecode in class files.
        Errors such as not emitting a branch argument that would lead outside the method, or any other bytecode
        that would cause a class file to fail verification would belong to the emitter.</dd>
      <dt><a href="/developerworks/bugs/index.php?group_id=10&amp;set=custom&amp;_status=1&amp;_category=107">Dependencies</a></dt>
       <dd>The dependency subsystem is responsible for tracking what classes make use of what other classes. A bug against
        the dependency tracker might be if a class should have been recompiled because other classes changed, but it wasn't.</dd>
      <dt><a href="/developerworks/bugs/index.php?group_id=10&amp;set=custom&amp;_status=1&amp;_category=108">User Interface</a></dt>
       <dd>The user interface is responsible for dealing with command line options, and reading user environment variables,
        an example bug against the UI is that the usage test ignores the -Xstdout argument and prints to stderr.</dd>
      <dt><a href="/developerworks/bugs/index.php?group_id=10&amp;set=custom&amp;_status=1&amp;_category=109">Build</a></dt>
       <dd>Use the build component if the Jikes source code fails to compile on your platform, examples include faulty
        logic in ./configure tests.</dd>
      <dt><a href="/developerworks/bugs/index.php?group_id=10&amp;set=custom&amp;_status=1&amp;_category=110">Specifications</a></dt>
       <dd>This component is used to track Jikes' compliance with specification issues, and more often to track when clarification
        is needed from Sun.</dd>
      <dt><a href="/developerworks/bugs/index.php?group_id=10&amp;set=custom&amp;_status=1&amp;_category=111">Documentation / Web</a></dt>
       <dd>This component is used report problems either in the website, or the shipped documentation. For example, if a link goes
        404.</dd>
      <dt><a href="/developerworks/bugs/index.php?group_id=10&amp;set=custom&amp;_status=1&amp;_category=120">Suggestion or Feature Request</a></dt>
       <dd>This one should be self-explanatory, RFEs go here.</dd>
     </dl>
     <p>If you do find your bug in one of the above categories already then you should evaluate if you have any additional information
      you can add to the existing bug, such as a simpler testcase, or a backtrace of a core fault or assertion. See the next section for
      some of the common information we need to properly deal with a bug, if the original report doesn't contain some of that info, can
      you supply it? If so please append it to the existing bug. If, on the other hand, you do not see your bug in any of the existing ones,
      please continue to the next step and collect the information needed for your new bug.</p>
     <h1>Collect the information needed for a Jikes bug report</h1>
     <p>There are some basic pieces of information that are needed for a bug report, surprisingly a number of bugs come it that
      lack this basic information. I say this is surprising because of the target audience of the project... developers. You're
      a Java developer right, how would you like a defect from your users that just says: "it dumped core, you should fix it"?</p>
     <p><strong>All</strong> bug reports must include the following basic information:</p>
     <dl>
      <dt>Version</dt>
       <dd>What version of Jikes have you recreated the problem with, is it the most currently released version? If not retest with that
        version before submitting your bug. (If you don't you'll be asked to do so before anyone really looks at the bug.) If you're
        building it from CVS when did you last do a CVS update? Do you have any diffs against the current CVS tree? (Intentionally or
        not.)</dd>
      <dt>Platform</dt>
       <dd>What kind of machine are you on? What's the operating system? The C/C++ library? What's the version? If we don't know what
        you're running on we can't tell you if it's a known issue on that platform, or possibly recreate it if it's a previously unknown
        quirk.</dd>
      <dt>Full Error Message</dt>
       <dd>What was the <strong>full</strong> error message? Did Jikes drop core? What signal did it catch? Was it an abort? What was
        the assertion that lead to the abort? If you're on a real operating system and get a core file, what does the debugger tell you
        about the core file? (For those on Windows, you'll have to rely on Dr. Watson or Quincy to see what the stack trace is, sorry.)</dd>
      <dt>Testcase</dt>
       <dd>We have to know how to recreate the problem in order to debug it. Testcases should preferably be in jacks format; however,
        this is not a hard and fast rule. Testcases must however be COMPLETE and SELF-CONTAINED. Testcases should also include an
        example of how to use it... even if it seems obvious; we've had bugs returned as "works for me" because the submitter neglected
        to mention that the problem only happens with the -g option passed to the compiler. <em>Defects without testcases will most
        likely not be looked at by any of the main developers, if they are, resulting patches are near impossible to get into the
        main tree without a regression test, which usually comes from the initial bugs' testcase.</em></dd>
      <dt>Contact information</dt>
       <dd>This one sometimes strikes people as odd... but bug reporting is not a one-way street. If you're going to take the time
        to report a bug, and we're going to take the time to fix the bug, then we need a way to communicate with you it's as simple
        as that. The new dW/osssf system we use to collect bugs has one advantage... you can't submit a bug without verifiable contact
        information.</dd>
     </dl>     
     
     <h1>Report the bug</h1>
     <p>This is the <strong>easy</strong> part. Just go to the <a href="/developerworks/bugs/?func=addbug&amp;group_id=10">submission page</a>
      and put all the information above into the form in some nice coherent fashion. The first thing you'll need to supply is your email
      address, be sure to put a VALID address, you'll also need to decide if you want this address to be publicly visible on this bug.
      Reference the IBM Privacy Guidelines at the bottom of that page for details, but the general gist of this switch is that the dW staff,
      and (<small>in theory</small>) the Jikes project administraitors and registered developers will be able to see your address either way (<small>although this
      is currently broken such that only the deverloperWorks staff can retrieve all addresses</small>) but the general public will ONLY be
      able to see your address if you check the box. Note that this is the address where the system will mail updates about the status of
      your bug as it changes. The next option you need to provide is what category your bug belongs in. Reference the set of categories
      above for details, or leave it as <code>None</code> if you don't know. The bug group can be left alone or set to <code>Open</code>.
      Next you will need to furnish a short summary of the problem... this is limited to a couple dozen characters, so be breif but CLEAR.
      That last large area... well that's where everything else goes.</p>
     <p>After you click submit there is one last <strong>very important</strong> step you'll have to do: confirm your address. A message
      will be sent to your email address which contains a URL... untill you visit that URL your bug will <em>NOT</em> be seen, you <strong>must</strong>
      visit the URL that is sent to you in order to confirm your address is valid.</p>

     <h1>Assist in the elimination of the bug</h1>
     <p>Having reported the bug many people think that their job is finished, ideally this maybe the case, but out here in the real world
      it never is. As developers and other users are working on your bug they may need information, they'll post questions, or suggestions
      to work around the bug into it's record in the database. If we never hear from you again then odds are very good that the bug will
      never move forward. You have got to stick around a help with the debug process.</p>
     
     <h1>Verify the bug has been fixed</h1>
     <p>The last step. By now the bug has been cornerd and eradicated, a patch has been developed, and commited, possibly even shipped.
      This last step is the most important from your end... verify that the fix works on your machine, with your project in your environment.
      This can be especially important with bugs where you had to reduce any enviroment of input inorder to produce a testcase. Once a bug
      is verified as fixed either in a cvs build or in an official production release.</p>

    </td>
   </tr>
  </table>
 </body>
</html>
