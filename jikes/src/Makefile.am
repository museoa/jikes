bin_PROGRAMS = jikes

jikes_SOURCES = \
ast.cpp \
body.cpp \
bytecode.cpp \
case.cpp \
code.cpp \
control.cpp \
decl.cpp \
definite.cpp \
depend.cpp \
diagnose.cpp \
double.cpp \
dump.cpp \
error.cpp \
expr.cpp \
getclass.cpp \
incrmnt.cpp \
init.cpp \
javaact.cpp \
jikes.cpp \
jikesapi.cpp \
long.cpp \
lookup.cpp \
lpginput.cpp \
modifier.cpp \
op.cpp \
option.cpp \
parser.cpp \
scanner.cpp \
segment.cpp \
set.cpp \
stream.cpp \
symbol.cpp \
system.cpp \
tab.cpp \
unparse.cpp \
unzip.cpp \
zip.cpp \
platform.cpp \
jikesapi.h

# FIXME : jikesapi.h does not get installed right now.

noinst_HEADERS = \
access.h \
ast.h \
bytecode.h \
case.h \
class.h \
code.h \
control.h \
depend.h \
diagnose.h \
double.h \
error.h \
getclass.h \
javaact.h \
javadcl.h \
javadef.h \
javaprs.h \
javasym.h \
jikesapi.h \
long.h \
lookup.h \
lpginput.h \
op.h \
option.h \
parser.h \
platform.h \
scanner.h \
segment.h \
semantic.h \
set.h \
spell.h \
stream.h \
symbol.h \
tab.h \
table.h \
tuple.h \
unzip.h \
zip.h

# Include the java.g file in the .tar ball

EXTRA_DIST = java.g


# Special rule to remake autogenerated Java files

jikespg:
	cd $(srcdir)
	jikespg java.g
	rm -f java.l

# This rule will build an efence malloc debugging enabled version of jikes.
# This should be used for testing purposes only! It is really slow!

efence:
	@rm -f jikes$(EXEEXT)
	$(CXXLINK) -o jikes$(EXEEXT) $(jikes_OBJECTS) -lstdc++ -lefence



# The rest of the entries in this file are dependencies
# manually extracted from the .h and .cpp files. We
# can not use the automatic dependency tracking in
# automake because it has some serious portability
# problems with non-gcc compilers. If dependencies
# are changed in the source code, these deps will
# need to be manually updated.

access_h = access.h platform.h

ast_h = ast.h platform.h stream.h symbol.h set.h

bytecode_h = bytecode.h platform.h tuple.h ast.h class.h \
option.h long.h op.h segment.h

case_h = case.h platform.h

class_h = class.h platform.h semantic.h access.h tuple.h op.h

code_h = code.h platform.h

control_h = control.h platform.h option.h symbol.h tuple.h set.h

depend_h = depend.h platform.h

diagnose_h = diagnose.h platform.h parser.h jikesapi.h

double_h = double.h platform.h

error_h = error.h platform.h stream.h tuple.h jikesapi.h

getclass_h = getclass.h platform.h semantic.h long.h double.h

javaact_h = javaact.h

javadcl_h = javadcl.h

javadef_h = javadef.h

javaprs_h = javaprs.h

javasym_h = javasym.h

jikesapi_h = jikesapi.h

long_h = long.h platform.h

lookup_h = lookup.h platform.h tuple.h long.h double.h

lpginput_h = lpginput.h platform.h stream.h

op_h = op.h platform.h tuple.h

option_h = option.h platform.h code.h tuple.h jikesapi.h

parser_h = parser.h platform.h lpginput.h

platform_h = platform.h config.h tuple.h

scanner_h = scanner.h platform.h code.h javadef.h javasym.h stream.h

segment_h = segment.h platform.h tuple.h

semantic_h = semantic.h platform.h ast.h diagnose.h error.h  \
symbol.h control.h tuple.h set.h

set_h = set.h platform.h symbol.h

spell_h = spell.h platform.h case.h

stream_h = stream.h platform.h javadef.h javasym.h tuple.h \
tab.h lookup.h jikesapi.h

symbol_h = symbol.h platform.h code.h stream.h option.h lookup.h \
depend.h access.h tuple.h case.h

tab_h = tab.h platform.h

table_h = table.h platform.h symbol.h

tuple_h = tuple.h jikesapi.h

unzip_h = unzip.h platform.h

zip_h = zip.h platform.h tuple.h unzip.h




ast.$(OBJEXT) : ast.cpp $(ast_h)

body.$(OBJEXT) : body.cpp $(platform_h) $(semantic_h) $(control_h)

bytecode.$(OBJEXT) : bytecode.cpp $(bytecode_h) $(ast_h) $(class_h) \
$(control_h) $(semantic_h) $(stream_h) $(symbol_h) $(table_h)

case.$(OBJEXT) : case.cpp $(case_h)

code.$(OBJEXT) : code.cpp $(code_h)

control.$(OBJEXT) : control.cpp $(control_h) $(scanner_h) $(parser_h) \
$(semantic_h) $(error_h) $(bytecode_h) $(case_h)

decl.$(OBJEXT) : decl.cpp $(platform_h) $(semantic_h) $(control_h) \
$(depend_h) $(table_h) $(tuple_h)

definite.$(OBJEXT) : definite.cpp $(platform_h) $(semantic_h)

depend.$(OBJEXT) : depend.cpp $(depend_h) $(control_h) $(ast_h) \
$(semantic_h)

diagnose.$(OBJEXT) : diagnose.cpp $(diagnose_h) $(control_h) \
$(semantic_h) $(case_h) $(spell_h)

double.$(OBJEXT) : double.cpp $(double_h) $(long_h)

dump.$(OBJEXT) : dump.cpp $(platform_h) $(javasym_h) $(control_h) \
$(stream_h)

error.$(OBJEXT) : error.cpp $(error_h) $(control_h) $(semantic_h) \
$(ast_h)

expr.$(OBJEXT) : expr.cpp $(platform_h) $(double_h) $(parser_h) \
$(semantic_h) $(control_h) $(table_h) $(tuple_h) $(spell_h)

getclass.$(OBJEXT) : getclass.cpp $(getclass_h) $(control_h) \
$(semantic_h) $(access_h) $(zip_h) $(jikesapi_h)

incrmnt.$(OBJEXT) : incrmnt.cpp $(platform_h) $(control_h) \
$(scanner_h) $(parser_h) $(semantic_h) $(case_h) $(set_h)

init.$(OBJEXT) : init.cpp $(platform_h) $(semantic_h) $(control_h)

javaact.$(OBJEXT) : javaact.cpp $(platform_h) $(parser_h) $(ast_h) $(javaact_h)

jikes.$(OBJEXT) : jikes.cpp $(platform_h) $(jikesapi_h)

jikesapi.$(OBJEXT) : jikesapi.cpp $(platform_h) $(control_h) $(jikesapi_h)

long.$(OBJEXT) : long.cpp $(long_h) $(double_h)

lookup.$(OBJEXT) : $(lookup_cpp) $(lookup_h) $(control_h) \
$(symbol_h) $(code_h) $(ast_h) $(case_h)

lpginput.$(OBJEXT) : lpginput.cpp $(lpginput_h) $(javadcl_h)

modifier.$(OBJEXT) : modifier.cpp $(platform_h) $(semantic_h)

op.$(OBJEXT) : op.cpp $(op_h)

option.$(OBJEXT) : option.cpp $(option_h) $(javasym_h) \
$(error_h) $(case_h)

parser.$(OBJEXT) : parser.cpp $(parser_h) $(ast_h)

platform.$(OBJEXT) : platform.cpp $(platform_h) $(long_h) $(double_h)

scanner.$(OBJEXT) : scanner.cpp $(scanner_h) $(control_h) $(error_h)

segment.$(OBJEXT) : segment.cpp $(segment_h)

set.$(OBJEXT) : set.cpp $(set_h)

stream.$(OBJEXT) : stream.cpp $(stream_h) $(code_h) $(zip_h) \
$(symbol_h) $(control_h) $(semantic_h)

system.$(OBJEXT) : system.cpp $(platform_h) $(control_h) \
$(semantic_h) $(zip_h)

symbol.$(OBJEXT) : symbol.cpp $(symbol_h) $(stream_h) \
$(control_h) $(ast_h) $(semantic_h) $(table_h) $(zip_h) \
$(set_h) $(case_h)

tab.$(OBJEXT) : tab.cpp $(tab_h)

unparse.$(OBJEXT) : unparse.cpp $(ast_h)

unzip.$(OBJEXT) : unzip.cpp $(unzip_h)

zip.$(OBJEXT) : zip.cpp $(zip_h) $(control_h) $(symbol_h)

